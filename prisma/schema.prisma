generator client {
  provider = "prisma-client-js"
}

// For development
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ok
enum ProductStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  ARCHIVED
}

// ok
model Product {
  id                   String           @id @default(uuid())
  title                String
  description          String
  showing_instruction  String
  bloom_size           String
  cost_price           Float
  selling_price        Float
  inventory            Int
  sku                  Int
  discount_id          String?
  admin_id             String? //
  status               ProductStatus    @default(OUT_OF_STOCK)
  create_at            DateTime
  modified_at          DateTime?
  deleted_at           DateTime?
  category             String
  Flower_Family        String
  Seasonal_Information String
  Flower_Color         String
  Flower_Type          String
  Discount             Discount?        @relation(fields: [discount_id], references: [id])
  Product_Review       Product_Review[]
  Order_Item           Order_Item[]
  Admin_User           Admin_User?       @relation(fields: [admin_id], references: [id])
  Product_Image        Product_Image?
  MyBasket             MyBasket[]

  @@index(fields: [admin_id], map: "index_admin_id")
  @@index(fields: [discount_id], map: "index_discount_id")
}

model Product_Image {
  id        String  @id @default(cuid())
  productId String
  prefix    String  @default("")
  data1     String  @default("") @db.Text
  data2     String  @default("") @db.Text
  data3     String  @default("") @db.Text
  data4     String  @default("") @db.Text
  data5     String  @default("") @db.Text
  data6     String  @default("") @db.Text
  data7     String  @default("") @db.Text
  data8     String  @default("") @db.Text
  data9     String  @default("") @db.Text
  data10    String  @default("") @db.Text
  data11    String  @default("") @db.Text
  data12    String  @default("") @db.Text
  data13    String  @default("") @db.Text
  data14    String  @default("") @db.Text
  data15    String  @default("") @db.Text
  data16    String  @default("") @db.Text
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique(fields: [productId], name: "unique_productId", map: "unique_productId")
}

// ok
enum Discount_Status {
  ACTIVE
  INACTIVE
}

// ok
model Discount {
  id               String          @id @default(uuid())
  name             String
  description      String?
  discount_precent Float
  status           Discount_Status @default(INACTIVE)
  create_at        DateTime
  modified_at      DateTime?
  deleted_at       DateTime?
  Product          Product[]
}

// ok
model Product_Review {
  id           String    @id @default(uuid())
  product_id   String?
  title        String
  rating       Int
  content      String?
  published_on DateTime
  deleted_at   DateTime?

  Product Product? @relation(fields: [product_id], references: [id])

  @@index(fields: [product_id], map: "index_product_id")
}

// ok
enum Acc_status {
  ACTIVE
  SUSPENDED
  DELETED
}

// ok
model User {
  id            String     @id @default(cuid())
  email         String?
  emailVerified DateTime?
  image         String?
  first_name    String
  last_name     String
  password      String
  telephone     String
  dob           DateTime
  register_on   DateTime
  last_login    DateTime?
  acc_status    Acc_status @default(ACTIVE)
  modified_at   DateTime?
  deleted_at    DateTime?

  accounts       Account[]
  sessions       Session[]
  User_Payment   User_Payment[]
  Address        Address[]
  Order_details  Order_details[]
  User_Image     User_Image?
  DefaultPayment DefaultPayment?
  DefaultAddress DefaultAddress?
  MyBasket       MyBasket[]

  @@unique(fields: [email], name: "unique_email")
}

model MyBasket {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int    @default(1)

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(fields: [userId], name: "index_userId")
  @@index(fields: [productId], name: "index_productId")
}

model DefaultPayment {
  id        String  @id @default(cuid())
  userId    String  @unique
  paymentId String? @unique

  User    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Payment User_Payment? @relation(fields: [paymentId], references: [id])

  @@unique(fields: [userId], map: "unique_user_id", name: "unique_user_id")
  @@unique(fields: [paymentId], map: "unique_paymentId", name: "unique_paymentId")
}

model DefaultAddress {
  id        String  @id @default(cuid())
  userId    String  @unique
  addressId String? @unique

  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Address Address? @relation(fields: [addressId], references: [id])

  @@unique(fields: [userId], map: "unique_user_id", name: "unique_user_id")
  @@unique(fields: [addressId], map: "unique_addressId", name: "unique_addressId")
}

model User_Image {
  id     String @id @default(cuid())
  userId String
  prefix String @default("")
  data1  String @default("") @db.Text
  data2  String @default("") @db.Text
  data3  String @default("") @db.Text
  data4  String @default("") @db.Text
  data5  String @default("") @db.Text
  data6  String @default("") @db.Text
  data7  String @default("") @db.Text
  data8  String @default("") @db.Text
  data9  String @default("") @db.Text
  data10 String @default("") @db.Text
  data11 String @default("") @db.Text
  data12 String @default("") @db.Text
  data13 String @default("") @db.Text
  data14 String @default("") @db.Text
  data15 String @default("") @db.Text
  data16 String @default("") @db.Text
  User   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId], map: "unique_user_id", name: "unique_user_id")
}

// ok
model User_Payment {
  id           String    @id @default(uuid())
  user_id      String
  card_type    String
  provider     String
  name_on_card String
  card_number  String
  cvv          String
  card_expiry  DateTime
  create_at    DateTime
  modified_at  DateTime?
  deleted_at   DateTime?

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  Order_Transaction Order_Transaction[]
  DefaultPayment    DefaultPayment?

  @@index([user_id])
}

// ok
enum CardType {
  CREDIT
  DEBIT
}

// ok
enum OrderTransactionStatus {
  CANCELED
  FAILED
  PENDING
  REJECTED
  DECLINED
  SUCCESSFUL
}

// ok
model Order_Transaction {
  id          String                 @id @default(uuid())
  order_id    String
  payment_id  String
  type        CardType
  amount      Float
  status      OrderTransactionStatus
  create_at   DateTime
  modified_at DateTime?

  Order        Order_details @relation(fields: [order_id], references: [id])
  User_Payment User_Payment  @relation(fields: [payment_id], references: [id])

  @@index(fields: [payment_id], map: "index_payment_id")
  @@index(fields: [order_id], map: "index_order_id")
}

// ok
model Shipping {
  id                       String          @id @default(uuid())
  shipping_method          String
  courier_service_provider String
  shipping_cost            Float
  create_at                DateTime
  modified_at              DateTime?
  deleted_at               DateTime?
  Order_details            Order_details[]
}

// ok
model Address {
  id            String    @id @default(uuid())
  user_id       String
  address_line1 String
  address_line2 String?
  subDistrict   String
  district      String
  province      String
  zipcode       String
  create_at     DateTime
  modified_at   DateTime?
  deleted_at    DateTime?

  User           User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Order_details  Order_details[]
  DefaultAddress DefaultAddress?

  @@index(fields: [user_id], map: "index_user_id")
}

// ok
model Order_Item {
  id          String    @id @default(uuid())
  order_id    String
  product_id  String?
  price       Float
  discount    Float?
  quantity    Int
  create_at   DateTime
  modified_at DateTime?

  Order   Order_details @relation(fields: [order_id], references: [id])
  Product Product?      @relation(fields: [product_id], references: [id])

  @@index(fields: [order_id], map: "index_order_id")
  @@index(fields: [product_id], map: "index_product_id")
}

// ok
enum StatusType {
  CANCELED
  PENDING
  REJECTED
  DELIVERED
}

// ok
model Order_details {
  id              String     @id @default(uuid())
  user_id         String
  status          StatusType
  subtotal_amount Float
  product_discout Float
  tax_amount      Int
  shipping_id     String
  shipping_date   DateTime
  address_id      String
  total_amount    Float
  create_at       DateTime
  modified_at     DateTime?

  User     User     @relation(fields: [user_id], references: [id])
  shipping Shipping @relation(fields: [shipping_id], references: [id])
  Address  Address  @relation(fields: [address_id], references: [id])

  Order_Item        Order_Item[]
  Order_Transaction Order_Transaction[]

  @@index(fields: [user_id], map: "index_user_id")
  @@index(fields: [shipping_id], map: "index_shipping_id")
  @@index(fields: [address_id], map: "index_address_id")
}

// ok
enum AdminType {
  admin
  manager
  staff
}

// ok
model Admin_User {
  id          String    @id @default(uuid())
  usernames   String    @unique
  password    String
  first_name  String
  last_name   String
  create_at   DateTime
  last_login  DateTime?
  modified_at DateTime?
  deleted_at  DateTime?
  admin_type  AdminType @default(staff)
  Product     Product[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
